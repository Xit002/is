package pack;/*Пакет (package) — это некий контейнер, который используется для того, чтобы изолировать имена классов. 
pack - название пакета */

import javax.swing.*; // библиотека для графического интерфейса
import javax.swing.border.*;//библиотека необходимая для того, чтобы установить отступы 
import java.awt.event.*; /*Подключаем объект event, который содержит свойства, описывающие некое событие.
Каждый раз, когда происходит какое-либо событие, 
объект Event передается соответствующей программе обработки.
Используемым событием в нашей программе являются ACTION события.
*/
import java.awt.*; /*	java. - Все стандартные классы, поставляемые с системой Java, хранятся в пакете java.
java.awt  - подключение пакета awt, содержащего базовые графические функции:GridLayout, BorderLayout и т.д.
"*"-включение всех элементов библиотеки awt */	


public class Vkl_1 extends JPanel  {
	/*Класс Vkl_1, который доступен для любого файла из пакета pack наследует 
	функции элемента JPanel */


	
	private JPanel Panel_1_text, Panel_2_text, Panel_3_button;//панели на которых располагаются поля и кнопки. Панели доступны только для данного класса (private)
	private JButton sost_smet;// кнопка Рассчитать которая доступна только для данного класса
	private JLabel jlabel_1,jlabel_2,jlabel_3,jlabel_4, jlabel_5, jlabel_6, jlabel_7, jlabel_8, jlabel_9, 
	jlabel_10, jlabel_11,jlabel_12, jlabel_13; // Панели на которых располагается текст
	public static JTextField mat_zatr, t_izgot, kol_s, zarpl, rab_dn, st_st, sr_st, pr_rash;/* текстовые поля 
	в которые пользователь вводит данные, доступны для любого файла из пакета pack */
	public static JCheckBox calc;// компонент флажок
	public static JComboBox izd;
	public static int calc_int=0, izd_int;
			//переменная типа integer, доступная любому классу
		/*static позволяет определять статические методы. Это такие методы, которые являются общими для класса, а не для
	отдельного объекта этого класса. Также они могут работать лишь со статическими полями класса.К статическим методам 
	и переменным можно обращаться через имя класса.*/
	
	
	public Vkl_1() { /*Модификатор доступа public означает, что метод Index()виден и доступен любому классу.
		static означает, что не нужно создавать экземпляр(копию) объекта Index в памяти, чтобы использовать этот метод.
		Vkl_1 - панель, на ней будут все компоненты которые будут отображаться на 1 вкладке .*/
        
        setLayout (new BorderLayout()); /*	Оператор new создает экземпляр указанного класса
	  	Метод setLayout - Вызов менеджера компоновки, который задает определенный порядок панелей в контейнере.
 		Менеджер размещения BorderLayout - тип разбивки контейнера, при котором всё пространство контейнера разбивается 
 		на пять частей. В каждой из этих частей располагается один компонент. 
 		При добавлении компонента на контейнер с BorderLayout разработчик обязательно указывает, 
 		куда именно он хочет поместить компонент.*/

        Panel_1_text = new JPanel();//Панель на которой  располагаются текстовые поля и поля для ввода текста
        Panel_2_text = new JPanel(); //Панель на которой располагаются текстовые поля и поля для ввода текста
        Panel_3_button = new JPanel();//Панель на которой располагается кнопка

		add(Panel_1_text, BorderLayout.NORTH);//Добавление панели panel_1 наверх
		add(Panel_2_text, BorderLayout.CENTER);//Добавление панели panel_2 по центру
		add(Panel_3_button, BorderLayout.SOUTH);//Добавление панели panel_3 снизу

		Panel_1_text.setBorder(new EmptyBorder(10,10,5,10));
		/*установка внутренних отступов(10сверху,10слева,10снизу,10справа) */
		Panel_2_text.setBorder(new EmptyBorder(5,10,15,10));//установка внутренних отступов

		/* установка менеджера компоновки GridLayout. данный менеджер компоновки располагает компоненты в таблицу */
		Panel_1_text.setLayout(new GridLayout(1,1,0,15));//на панели 1 строки,1столбец ("смета расходов....")
		Panel_2_text.setLayout(new GridLayout(11,2,15,5));/* на панеле будет 10 строк, 2 столбца, расстояние между
		 столбцами 15, расстояние между строками 5 */
		Panel_3_button.setLayout(new GridLayout(1,1));//на панели 1 строка,1столбец, будет расположена кнопка

		jlabel_1 = new JLabel("Смета расходов на изготовление мебели", JLabel.CENTER);
		jlabel_2 = new JLabel("Изделие:", JLabel.LEFT);
		jlabel_3 = new JLabel("Расчет затрат на материалы", JLabel.LEFT);
		jlabel_4 = new JLabel("Итого затрат, руб: ", JLabel.RIGHT);
		jlabel_5 = new JLabel("Время изготовления изделия, дни:", JLabel.LEFT);
		jlabel_6 = new JLabel("Количество сотрудников, чел:", JLabel.LEFT);
		
		jlabel_6.setToolTipText("Количество сотрудников, которые работают над этим изделием");
		/* setToolTipText - подсказка, которая показывается при наведении на элемент */
		
		jlabel_7 = new JLabel("Зарплата рабочих за месяц, руб:", JLabel.LEFT);
		jlabel_8 = new JLabel("Рабочих дней в месяце, дни:", JLabel.LEFT);
		jlabel_9 = new JLabel("Амортизация", JLabel.LEFT);
		jlabel_10 = new JLabel("");
		jlabel_11 = new JLabel("Стоимость станка, руб:", JLabel.RIGHT);
		jlabel_12 = new JLabel("Срок службы станка, мес:", JLabel.RIGHT);
		jlabel_13 = new JLabel("Прочие расходы, руб:", JLabel.LEFT);

		/*Обозначаем что переменные Label_1,Label_2..являются объектом JLabel и указываем какой текст будет выводиться.
		JLabel.LEFT - выравнивание по левому краю,
		JLabel.RIGHT - выравнивание по правому краю
		*/
		
		sost_smet = new JButton("Составить смету"); //В скобках - надпись на кнопке
		
		calc = new JCheckBox();//компонент флажок 
		calc.setToolTipText("Нужно рассчитывать затраты на материалы?");
		/* setToolTipText - подсказка, которая показывается при наведении на элемент (компонент флажок)*/

		mat_zatr = new JTextField();
		mat_zatr.setMargin(new Insets(2, 5, 2, 5));//установка внутренних отступов для текстового поля (2-верхний отступ, 5-левый, 2-нижний, 5-правый)
		mat_zatr.setToolTipText("Введите величину материальных затрат");//всплывающая подсказка при наведении на текстовое поле
    	
		t_izgot = new JTextField();
		t_izgot.setMargin(new Insets(2, 5, 2, 5));//установка внутренних отступов для текстового поля (2-верхний отступ, 5-левый, 2-нижний, 5-правый)
		t_izgot.setToolTipText("Введите время изготовления изделия");//всплывающая подсказка при наведении на текстовое поле

		kol_s = new JTextField();
		kol_s.setMargin(new Insets(2, 5, 2, 5));//установка внутренних отступов для текстового поля (2-верхний отступ, 5-левый, 2-нижний, 5-правый)
		kol_s.setToolTipText("Введите количество сотрудников, которые работают над этим изделием");//всплывающая подсказка при наведении на текстовое поле
		
		zarpl = new JTextField();
		zarpl.setMargin(new Insets(2, 5, 2, 5));//установка внутренних отступов для текстового поля (2-верхний отступ, 5-левый, 2-нижний, 5-правый)
		zarpl.setToolTipText("Введите зарплату рабочих за месяц");//всплывающая подсказка при наведении на текстовое поле

		rab_dn = new JTextField();
		rab_dn.setMargin(new Insets(2, 5, 2, 5));//установка внутренних отступов для текстового поля (2-верхний отступ, 5-левый, 2-нижний, 5-правый)
		rab_dn.setToolTipText("Введите количество рабочих дней в месяце");//всплывающая подсказка при наведении на текстовое поле

		st_st = new JTextField();
		st_st.setMargin(new Insets(2, 5, 2, 5));//установка внутренних отступов для текстового поля (2-верхний отступ, 5-левый, 2-нижний, 5-правый)
		st_st.setToolTipText("Введите стоимость станка");//всплывающая подсказка при наведении на текстовое поле

		sr_st = new JTextField();
		sr_st.setMargin(new Insets(2, 5, 2, 5));//установка внутренних отступов для текстового поля (2-верхний отступ, 5-левый, 2-нижний, 5-правый)
		sr_st.setToolTipText("Введите срок службы станка");//всплывающая подсказка при наведении на текстовое поле
		
		pr_rash = new JTextField();
		pr_rash.setMargin(new Insets(2, 5, 2, 5));//установка внутренних отступов для текстового поля (2-верхний отступ, 5-левый, 2-нижний, 5-правый)
		pr_rash.setToolTipText("Введите прочие расходы");//всплывающая подсказка при наведении на текстовое поле
		
		String[] str = {
				"cтол", "стул", "тумба", "шкаф", "кровать","диван", "комод", "кресло"
  			};
		/*	String[] str – класс с оператором приема строки
	  	В строке ниже мы будем использовать данный оператор для передачи строки в выпадающий список
	 	*/
		izd = new JComboBox(str);   
		/*	JComboBox - Поле с выпадающим списком
	   	Создаем переменную Box_st И присваиваем ей функции класса JComboBox
	   	Оператор new создает экземпляр указанного класса
	   	JComboBox(str) значит что мы в качестве строк
	   	выпадающего списка принимаем считанные строки параметром str
	 	*/
		
		
		Panel_3_button.add(sost_smet);//Добавление кнопки на панель panel_3
		
		//Добавление компонентов JLabel, JTextField, JComboBox, JCheckBox на панели panel_1 и panel_2
		Panel_1_text.add(jlabel_1);

		Panel_2_text.add(jlabel_2);
		Panel_2_text.add(izd);
		Panel_2_text.add(jlabel_3);
		Panel_2_text.add(calc);
		Panel_2_text.add(jlabel_4);
		Panel_2_text.add(mat_zatr);
		Panel_2_text.add(jlabel_5);
		Panel_2_text.add(t_izgot);
		Panel_2_text.add(jlabel_6);
		Panel_2_text.add(kol_s);		
		Panel_2_text.add(jlabel_7);
		Panel_2_text.add(zarpl);	
		Panel_2_text.add(jlabel_8);
		Panel_2_text.add(rab_dn);
		Panel_2_text.add(jlabel_9);
		Panel_2_text.add(jlabel_10);
		Panel_2_text.add(jlabel_11);
		Panel_2_text.add(st_st);
		Panel_2_text.add(jlabel_12);
		Panel_2_text.add(sr_st);
		Panel_2_text.add(jlabel_13);
		Panel_2_text.add(pr_rash);		
		//Добавление компонентов JLabel, JTextField, JComboBox, JCheckBox на панели panel_1 и panel_2

		
		calc.addItemListener(new ItemListener(){   /*Для компонента флажок устанавливаем слушатель события                                                        
			Если нажать на компонент - сработает проверка выбран флажок или снят */                                                     
			public void itemStateChanged(ItemEvent e) 
			/*. В теле метода itemStateChanged располагается код, который выполняется при смене состояния флажка. */
			{
				if (e.getSource()==calc)//если событие произошло именно с флажком calc, то выполняется следующее
					if(e.getStateChange()==1){ /* Если данный компонент флажок включен (==1), то это означает что необходимо 
					рассчитать материальные затраты, значит поле для ввода материальных затрат становится недоступным */
						mat_zatr.setEditable(false);
						calc_int=1; //переменная отвечающая за то нужно рассчитывать мат.затраты или нет. 1-нужно
						}
					else { //флажок выключен
					mat_zatr.setEditable(true); /* материальные затраты известны значит поле для ввода мат.затрат доступно */
						calc_int=0; //переменная отвечающая за то нужно рассчитывать мат.затраты или нет. 0-не нужно
					}
			}                                                       
    	   }); 	

		sost_smet.addActionListener(new ActionListener(){    //добавляем слушателя события для кнопки 
			/*      "."  - указывает к какой переменной (кнопке) следует применить слушателя.
		 	addActionListener - добавление слушателя ActionListener к кнопке
		  	new - Оператор new создает экземпляр указанного класса 
		  	(Для того чтобы кнопки стали функциональными, каждой из них необходимо присвоить обработчик событий, 
		  	который будет отвечать за реагирование на события. 
		  	В нашем случае требуется идентифицировать событие нажатия кнопки – путем щелчка мышью. 
		  	Поэтому будет использоваться интерфейс "ActionListener", 
		  	предназначенный для обработки событий "ActionEvent".
		  	тело интерфейса указывается ниже после фигурной скобки "{"
    	    */
    	    public void actionPerformed(ActionEvent e) 
    	    /* 	ActionListener" имеет метод "actionPerformed" объекта "ActionEvent", 
	      	который реализуется путем простого вызова обработчика событий ActionPerformed.
	      	Ключевое слово public означает, что метод actionPerformed() доступен для любого другого класса Java
	      	Ключевое слово void означает, что метод main() не возвращает данных в программу, которая его вызвала. 
	      	*/             
    	    {   
    	    
    	    	if ((Index.isValidInput_1(t_izgot, "время изготовления изделия"))&&
        	    		(Index.isValidInput_1(kol_s, "количество сотрудников, работающих над данным изделием"))&&
        	    		(Index.isValidInput(zarpl, "зарплату рабочих за месяц"))&&
        	    		(Index.isValidInput_1(rab_dn, "количество рабочих дней в месяце"))&&
        	    		(Index.isValidInput(st_st, "стоимость станка"))&&
        	    		(Index.isValidInput(sr_st, "срок службы станка"))&&
        	    		(Index.isValidInput(pr_rash, "прочие расходы"))){
    	    		/*Проверка правильности введенных данных. Функция isValidInput расположена в файле Index */
    	    		
    	    		if (calc_int==1){	//если флажок Рассчитать мат.затраты включен, то переходим на следующую вкладку
    	    			if (Integer.parseInt(rab_dn.getText())<31){
    	    			Index.JTP1.setEnabledAt(1, true);/*устанавливаем что вторая вкладка доступна */
    	    			Index.JTP1.setSelectedIndex(1); /*JTP1 - панель вкладок, расположенная в файле Index. 
    	    			setSelectedIndex - указываем какая вкладка должна показываться. 1 - вкладка Рассчитать матер.затрты.
    	    			Вкладка Cмета мебели - 0.
    	    			*/
    	    			}else {
	    					JDialog D=new JDialog();
	    	    			JOptionPane.showMessageDialog(D, "Введите правильные данные!", "Ошибка", JOptionPane.WARNING_MESSAGE);
	    	    			/* showMessageDialog Отображает модальный диалог с одной кнопкой, которая помечена текстом "Oшибка" (или его локальным эквивалентом). 
	   	    			 Когда модальный диалог становится видимым, он блокирует пользовательский ввод в другие окна программы. 
	   	    		 "Введите правильные данные!"  это сообщение отображаемые в диалоге
	   	               */
	    	    			rab_dn.requestFocus();//ставит фокус на строчке rab_dn
	    	    			rab_dn.setText("");  
	    	    			/* setText означает написать текст в текстовое поле. Между кавычками ничего нет, значит текстовое поле будет пустым
					    	*/ 
	    				}
    	    			
    	    			
    	    		} else { /* Если флажок выключен, проверяем правильно ли пользователь ввел данные в поле Материальные
    	    		затрты.  Если правильно - выполняем функцию которая расположена в файле Sost_smet.
    	    				Данная функция считывает введеные пользователем данные.*/
    	    			if (Index.isValidInput(mat_zatr, "материальные затраты")) {
    	    				if (Integer.parseInt(rab_dn.getText())<31){
    	    				izd_int=izd.getSelectedIndex();
    	    				Sost_smet.vkl_1();
    	    				Output_smet.main(null);  //Открываем окно с расчетами
    	    				Index.frame.setVisible(false); //Данное окно становится невидимым
    	    				} else {
    	    					JDialog D=new JDialog();
    	    	    			JOptionPane.showMessageDialog(D, "Введите правильные данные!", "Ошибка", JOptionPane.WARNING_MESSAGE);
    	    	    			/* showMessageDialog Отображает модальный диалог с одной кнопкой, которая помечена текстом "Oшибка" (или его локальным эквивалентом). 
    	   	    			 Когда модальный диалог становится видимым, он блокирует пользовательский ввод в другие окна программы. 
    	   	    		 "Введите правильные данные!"  это сообщение отображаемые в диалоге
    	   	               */
    	    	    			rab_dn.requestFocus();//ставит фокус на строчке rab_dn
    	    	    			rab_dn.setText("");  
    	    	    			/* setText означает написать текст в текстовое поле. Между кавычками ничего нет, значит текстовое поле будет пустым
    					    	*/ 
    	    				}
    	    			}
    	    		}
		         }
    	    }    	    	                                                        
    	   });

	
	
	
	}
	
	
	
	
	
}
