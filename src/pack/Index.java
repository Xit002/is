package pack; /*	указывает пакет "pack", в котором находится файл класса
Пакет (package) — это некий контейнер, который используется для того, чтобы изолировать имена классов.
 */

import java.awt.*;
/*	java. - Все стандартные классы, поставляемые с системой Java, хранятся в пакете j ava.
подключение пакета awt, содержащего базовые графические функции:GridLayout, BorderLayout и т.д.
В отличие от java.awt, javax.swing имеет более гибкую систему управления
и более широкий набор функций 
*/	
import javax.swing.*;
/*	Импортируем: 
javax.* — стандартные расширения.(Стандартные расширения (standard extensions) — это пакеты или наборы пакетов Java)
Swing - Библиотека графического интерфейса (конкретный пакет), В отличие от java.awt, javax.swing имеет более гибкую 
систему управления и более широкий набор функций
"*"-включение всех элементов библиотеки Swing (jbutton,jpanel,jlabel и т.д.)
"."(точка) используется для выделения элементов из ссылки на объект.
*/

public class Index extends JFrame { 
	/* Index() - это установка компонентов (панель вкладок) на JFrame. 
	(Public) - означает что фрейм Index можно вызвать из любого файла который лежит в пакете pack.
	static позволяет определять статические методы. Это такие методы, которые являются общими для класса, а не для
	отдельного объекта этого класса. Также они могут работать лишь со статическими полями класса.К статическим методам 
	и переменным можно обращаться через имя класса*/
	
	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;
	public static Index frame = new Index();
	
	public static void main(String[] args) {/*  Модификатор доступа public означает, что метод main(String[] args)виден и доступен любому классу. static означает, что не нужно создавать экземпляр(копию) объекта Index в памяти, чтобы использовать этот метод.
				С помощью static объявляются методы и переменные класса, используемые для работы с классом в целом. 
				Эти методы могут непосредственно работать только с локальными и статическими переменными.
				void означает, что метод main(String[] args)не возвращает данных в программу, которая его вызвала, 
				а просто выводит на экран строку.
				В методе main слова String[] args означают,что этот может получать массив объектов с типом String, т.е. текстовые данные.
				Программа может состоять из нескольких классов, но только один из них содержит метод main().
				Все существующие реализации Java-интерпретаторов, получив команду интерпретировать класс, 
				начинают свою работу с вызова метода main. 
				*/
		EventQueue.invokeLater(new Runnable() {
			public void run() {/* public - модификатор доступа, означающий, что метод run()виден и доступен любому классу.
				void означает, что метод run()не возвращает данных в программу, которая его вызвала, 
				а просто выводит на экран строку.
				Метод run с пустыми скобками, т.е. метод не имеет аргументов(параметров)	 
				*/
				try { 
					/* Для задания блока программного кода, который требуется защитить от исключений, используется ключевое слово try. 
					Сразу же после try-блока помещается блок catch, задающий тип исключения которое вы хотите обрабатывать.
					Исключение – это проблемная ситуация, возникающая по мере выполнения кода программы. Работает она так:
					1.Выполняется код внутри блока try. 2.Если в нём ошибок нет, то блок catch(err) игнорируется, то есть выполнение 
					доходит до конца try и потом прыгает через catch. 3.Если в нём возникнет ошибка, то выполнение try на ней
					 прерывается, и управление прыгает в начало блока catch(err).
					*/
					frame.setVisible(true); /* Устанавливаем видимость окна  */
					JTP1.setEnabledAt(1, false);/*устанавливаем что вторая вкладка недоступна */
				} catch (Exception e) { 
					/* Для задания блока программного кода, который требуется защитить от исключений, используется ключевое слово try. 
					Сразу же после try-блока помещается блок catch, задающий тип исключения которое вы хотите обрабатывать.
					Исключение – это проблемная ситуация, возникающая по мере выполнения кода программы. Работает она так:
					1.Выполняется код внутри блока try. 2.Если в нём ошибок нет, то блок catch(err) игнорируется, то есть выполнение 
					доходит до конца try и потом прыгает через catch. 3.Если в нём возникнет ошибка, то выполнение try на ней
					 прерывается, и управление прыгает в начало блока catch(err).
					*/
					e.printStackTrace();
				}
			}
		});
	}
	
	
	public static JTabbedPane JTP1; /* Модификатор доступа public означает,что переменная --JTP1-- доступна любому классу. 
	 JTabbedPane – панель вкладок Java Swing. */

	public Index() {/* Модификатор доступа public означает, что метод Index()виден и доступен любому классу.
		static означает, что не нужно создавать экземпляр(копию) объекта Index в памяти, чтобы использовать этот метод.
		С помощью static объявляются методы и переменные класса, используемые для работы с классом в целом. 
		Эти методы могут непосредственно работать только с локальными и статическими переменными.  */
		
		setTitle("Смета мебели"); //устанавливает название окна 
		setSize(460, 510); // указывает ширину и высоту.
		setLocationRelativeTo(null);//установить посередине экрана
		setResizable(false); //запрет на расширение окна 
		
		//по закрытию формы - закрывать приложение
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

		JTP1 = new JTabbedPane(JTabbedPane.TOP);
        getContentPane().add(JTP1);
        /* Для добавления новой вкладки на панель используется метод addTab. При добавлении новой вкладки 
        необходимо передать строку, которая будет являться заголовком вкладки, то есть отображаться на 
        самом ярлычке. Кроме этого вторым параметром необходимо указать панель или контейнер, 
        который будет располагаться уже на самой вкладке  */ 

        Vkl_1 vkl_1 = new Vkl_1();
        JTP1.addTab("Смета расходов", vkl_1);

        Vkl_2 vkl_2 = new Vkl_2();
        JTP1.addTab("Затраты на материалы", vkl_2);

 
	}

	  //проверка данных, введенных пользователем
    public static boolean isValidInput(JTextField jtxt, String description) {
        JDialog D = new JDialog();
		//если был введен какой-либо текст
        if (jtxt.getText().trim().length() > 0) {
            //проверка на ввод только целого числа
            try { /* Для задания блока программного кода, который требуется защитить от исключений, используется ключевое слово try. 
				Сразу же после try-блока помещается блок catch, задающий тип исключения которое вы хотите обрабатывать.
				Исключение – это проблемная ситуация, возникающая по мере выполнения кода программы. Для ловли этих исключений
				и существует специальная конструкция try {} catch {}				 
					*/
                //попытка преобразовать текст в целое число
                double num = Double.parseDouble(jtxt.getText());

                //если все нормально - возвращаем true
                return true;

            } catch (NumberFormatException e) {

                //предупреждение - неверный формат числа
                JOptionPane.showMessageDialog(D, "Вы должны ввести число!", "Ошибка", JOptionPane.WARNING_MESSAGE);

                //расположить курсор в текстово окне, чтобы пользователь еще раз ввел число
                jtxt.requestFocus();
                jtxt.setText("");

                //ошибка - возвращаем false
                return false;
            }

        } else {// если пользователь не ввели никаких данных

            //предупреждение, что нужно ввести данные
            JOptionPane.showMessageDialog(D, "Введите " + description, "Ошибка", JOptionPane.WARNING_MESSAGE);

            //расположить курсор в текстово окне, чтобы пользователь еще раз ввел число
            jtxt.requestFocus();
            jtxt.selectAll();

            //ошибка - возвращаем false
            return false;
        }
    }

    
    
    
    //Проверка на ЦЕЛОЕ ЧИСЛО
    
    public static boolean isValidInput_1(JTextField jtxt, String description) {
        JDialog D = new JDialog();
		//если был введен какой-либо текст
        if (jtxt.getText().trim().length() > 0) {
            //проверка на ввод только целого числа
            try { /* Для задания блока программного кода, который требуется защитить от исключений, используется ключевое слово try. 
				Сразу же после try-блока помещается блок catch, задающий тип исключения которое вы хотите обрабатывать.
				Исключение – это проблемная ситуация, возникающая по мере выполнения кода программы. Для ловли этих исключений
				и существует специальная конструкция try {} catch {}				 
					*/
                //попытка преобразовать текст в целое число
                int num = Integer.parseInt(jtxt.getText());

                //если все нормально - возвращаем true
                return true;

            } catch (NumberFormatException e) {

                //предупреждение - неверный формат числа
                JOptionPane.showMessageDialog(D, "Вы должны ввести целое число!", "Ошибка", JOptionPane.WARNING_MESSAGE);

                //расположить курсор в текстово окне, чтобы пользователь еще раз ввел число
                jtxt.requestFocus();
                jtxt.setText("");

                //ошибка - возвращаем false
                return false;
            }

        } else {// если пользователь не ввели никаких данных

            //предупреждение, что нужно ввести данные
            JOptionPane.showMessageDialog(D, "Введите " + description, "Ошибка", JOptionPane.WARNING_MESSAGE);

            //расположить курсор в текстово окне, чтобы пользователь еще раз ввел число
            jtxt.requestFocus();
            jtxt.selectAll();

            //ошибка - возвращаем false
            return false;
        }
    }
}



